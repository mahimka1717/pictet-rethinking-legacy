import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω ScrollTrigger
gsap.registerPlugin(ScrollTrigger);

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
let allLines = [];
let completedLines = new Set();

// –ê–±—Å–æ–ª—é—Ç–Ω–æ —Å—Ç—Ä–æ–≥–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
export const initAbsoluteSequentialAnimations = () => {
    const lineElements = document.querySelectorAll('.line');
    
    if (!lineElements.length) return;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    completedLines.clear();
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ª–∏–Ω–∏–π
    allLines = Array.from(lineElements).map((line, index) => {
        const path = line.querySelector('path');
        if (!path) return null;
        
        const pathLength = path.getTotalLength();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –≤—Å–µ –ª–∏–Ω–∏–∏ –Ω–µ–≤–∏–¥–∏–º—ã
        gsap.set(path, {
            strokeDasharray: pathLength,
            strokeDashoffset: pathLength
        });
        
        return {
            element: line,
            path: path,
            pathLength: pathLength,
            index: index
        };
    }).filter(Boolean);
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${allLines.length} –ª–∏–Ω–∏–π –¥–ª—è —Å—Ç—Ä–æ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏`);
    
    // –°–æ–∑–¥–∞–µ–º ScrollTrigger –¥–ª—è –∫–∞–∂–¥–æ–π –ª–∏–Ω–∏–∏
    allLines.forEach((lineData, index) => {
        const { element, path, pathLength } = lineData;
        
        ScrollTrigger.create({
            trigger: element,
            start: "top 80%",
            end: "bottom 20%",
            scrub: 1,
            onUpdate: (self) => {
                const progress = self.progress;
                
                // –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ª–∏–Ω–∏—è –º–æ–∂–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –í–°–ï –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
                const canAnimate = canLineAnimateStrict(index);
                
                if (canAnimate && progress > 0) {
                    // –ê–Ω–∏–º–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –ª–∏–Ω–∏—é
                    const currentOffset = pathLength * (1 - progress);
                    gsap.set(path, {
                        strokeDashoffset: currentOffset
                    });
                    
                    // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –ø—Ä–∏ 95% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    if (progress >= 0.95) {
                        if (!completedLines.has(index)) {
                            completedLines.add(index);
                            console.log(`‚úÖ –õ–∏–Ω–∏—è ${index} –ó–ê–í–ï–†–®–ï–ù–ê! –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${Array.from(completedLines).join(', ')}`);
                        }
                    }
                } else {
                    // –õ–∏–Ω–∏—è –ù–ï –º–æ–∂–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å—Å—è - –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–≤–∏–¥–∏–º–æ–π
                    gsap.set(path, {
                        strokeDashoffset: pathLength
                    });
                }
                
                // –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –ª–∏–Ω–∏–π
                if (index <= 5) {
                    console.log(`–õ–∏–Ω–∏—è ${index}: –ø—Ä–æ–≥—Ä–µ—Å—Å=${Math.round(progress * 100)}%, –º–æ–∂–µ—Ç–ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å—Å—è=${canAnimate}, –∑–∞–≤–µ—Ä—à–µ–Ω–∞=${completedLines.has(index)}`);
                }
            },
            onLeave: () => {
                // –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ viewport –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤–∏–¥–∏–º—ã–º–∏
                if (completedLines.has(index)) {
                    gsap.set(path, {
                        strokeDashoffset: 0 // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–¥–∏–º–æ–π
                    });
                } else {
                    gsap.set(path, {
                        strokeDashoffset: pathLength // –°–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
                    });
                }
            },
            onEnterBack: () => {
                // –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ viewport –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
                if (completedLines.has(index)) {
                    gsap.set(path, {
                        strokeDashoffset: 0 // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º–æ–π
                    });
                }
            }
        });
    });
    
    // –°–¢–†–û–ì–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ - –ª–∏–Ω–∏—è –º–æ–∂–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –í–°–ï –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    const canLineAnimateStrict = (currentIndex) => {
        // –ü–µ—Ä–≤–∞—è –ª–∏–Ω–∏—è (–∏–Ω–¥–µ–∫—Å 0) –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å—Å—è
        if (currentIndex === 0) {
            return true;
        }
        
        // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –í–°–ï –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        for (let i = 0; i < currentIndex; i++) {
            if (!completedLines.has(i)) {
                if (currentIndex <= 5) { // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –ª–∏–Ω–∏–∏
                    console.log(`‚ùå –õ–∏–Ω–∏—è ${currentIndex} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞! –õ–∏–Ω–∏—è ${i} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
                }
                return false;
            }
        }
        
        console.log(`‚úÖ –õ–∏–Ω–∏—è ${currentIndex} –º–æ–∂–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å—Å—è! –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã`);
        return true;
    };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
export const resetLineAnimations = () => {
    completedLines.clear();
    allLines.forEach(lineData => {
        gsap.set(lineData.path, {
            strokeDashoffset: lineData.pathLength
        });
    });
    console.log("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π —Å–±—Ä–æ—à–µ–Ω–æ");
};

// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
const resetAnimationState = () => {
    allLines = [];
    completedLines.clear();
    ScrollTrigger.getAll().forEach(trigger => trigger.kill());
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
export const initLineDrawAnimation = () => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    resetAnimationState();
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            initAbsoluteSequentialAnimations();
        });
    } else {
        initAbsoluteSequentialAnimations();
    }
};